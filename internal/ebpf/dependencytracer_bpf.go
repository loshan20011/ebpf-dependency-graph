// Code generated by bpf2go; DO NOT EDIT.

package ebpf

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"
	"structs"

	"github.com/cilium/ebpf"
)

type dependencyTracerCookieMeta struct {
	_     structs.HostLayout
	Dport uint16
	_     [2]byte
	Daddr uint32
	Pid   uint32
	Comm  [16]int8
}

type dependencyTracerDependencyInfo struct {
	_                    structs.HostLayout
	FirstSeen            uint64
	LastSeen             uint64
	RequestCount         uint64
	TotalLatencyNs       uint64
	AvgLatencyNs         uint64
	ErrorCount           uint64
	Protocol             [8]int8
	RelationshipStrength uint8
	_                    [7]byte
}

type dependencyTracerDependencyKey struct {
	_      structs.HostLayout
	Source dependencyTracerServiceKey
	Dest   dependencyTracerServiceKey
}

type dependencyTracerFlowInfo struct {
	_           structs.HostLayout
	FirstSeen   uint64
	LastSeen    uint64
	BytesSent   uint64
	PacketsSent uint64
	BytesRecv   uint64
	PacketsRecv uint64
	SrcPid      uint32
	DstPid      uint32
	SrcComm     [16]int8
	DstComm     [16]int8
	HttpMethod  [8]int8
	HttpPath    [32]int8
	FlowState   uint8
	_           [7]byte
}

type dependencyTracerFlowKey struct {
	_        structs.HostLayout
	Saddr    uint32
	Daddr    uint32
	Sport    uint16
	Dport    uint16
	Protocol uint8
	_        [3]byte
}

type dependencyTracerServiceInfo struct {
	_              structs.HostLayout
	FirstSeen      uint64
	LastSeen       uint64
	TotalRequests  uint64
	TotalResponses uint64
	ServiceName    [32]int8
	ProcessName    [16]int8
	Pid            uint32
	ServiceType    uint8
	_              [3]byte
}

type dependencyTracerServiceKey struct {
	_    structs.HostLayout
	Ip   uint32
	Port uint16
	_    [2]byte
}

// loadDependencyTracer returns the embedded CollectionSpec for dependencyTracer.
func loadDependencyTracer() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_DependencyTracerBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load dependencyTracer: %w", err)
	}

	return spec, err
}

// loadDependencyTracerObjects loads dependencyTracer and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*dependencyTracerObjects
//	*dependencyTracerPrograms
//	*dependencyTracerMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadDependencyTracerObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadDependencyTracer()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// dependencyTracerSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type dependencyTracerSpecs struct {
	dependencyTracerProgramSpecs
	dependencyTracerMapSpecs
	dependencyTracerVariableSpecs
}

// dependencyTracerProgramSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type dependencyTracerProgramSpecs struct {
	CgroupBindTracker    *ebpf.ProgramSpec `ebpf:"cgroup_bind_tracker"`
	CgroupConnectTracker *ebpf.ProgramSpec `ebpf:"cgroup_connect_tracker"`
	SockopsTracker       *ebpf.ProgramSpec `ebpf:"sockops_tracker"`
	TcDependencyTracker  *ebpf.ProgramSpec `ebpf:"tc_dependency_tracker"`
	TraceSendtoEnhanced  *ebpf.ProgramSpec `ebpf:"trace_sendto_enhanced"`
	XdpDependencyTracker *ebpf.ProgramSpec `ebpf:"xdp_dependency_tracker"`
}

// dependencyTracerMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type dependencyTracerMapSpecs struct {
	CookieMap        *ebpf.MapSpec `ebpf:"cookie_map"`
	DependencyEvents *ebpf.MapSpec `ebpf:"dependency_events"`
	DependencyMap    *ebpf.MapSpec `ebpf:"dependency_map"`
	FlowEvents       *ebpf.MapSpec `ebpf:"flow_events"`
	FlowMap          *ebpf.MapSpec `ebpf:"flow_map"`
	PidMap           *ebpf.MapSpec `ebpf:"pid_map"`
	ServiceMap       *ebpf.MapSpec `ebpf:"service_map"`
}

// dependencyTracerVariableSpecs contains global variables before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type dependencyTracerVariableSpecs struct {
}

// dependencyTracerObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadDependencyTracerObjects or ebpf.CollectionSpec.LoadAndAssign.
type dependencyTracerObjects struct {
	dependencyTracerPrograms
	dependencyTracerMaps
	dependencyTracerVariables
}

func (o *dependencyTracerObjects) Close() error {
	return _DependencyTracerClose(
		&o.dependencyTracerPrograms,
		&o.dependencyTracerMaps,
	)
}

// dependencyTracerMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadDependencyTracerObjects or ebpf.CollectionSpec.LoadAndAssign.
type dependencyTracerMaps struct {
	CookieMap        *ebpf.Map `ebpf:"cookie_map"`
	DependencyEvents *ebpf.Map `ebpf:"dependency_events"`
	DependencyMap    *ebpf.Map `ebpf:"dependency_map"`
	FlowEvents       *ebpf.Map `ebpf:"flow_events"`
	FlowMap          *ebpf.Map `ebpf:"flow_map"`
	PidMap           *ebpf.Map `ebpf:"pid_map"`
	ServiceMap       *ebpf.Map `ebpf:"service_map"`
}

func (m *dependencyTracerMaps) Close() error {
	return _DependencyTracerClose(
		m.CookieMap,
		m.DependencyEvents,
		m.DependencyMap,
		m.FlowEvents,
		m.FlowMap,
		m.PidMap,
		m.ServiceMap,
	)
}

// dependencyTracerVariables contains all global variables after they have been loaded into the kernel.
//
// It can be passed to loadDependencyTracerObjects or ebpf.CollectionSpec.LoadAndAssign.
type dependencyTracerVariables struct {
}

// dependencyTracerPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadDependencyTracerObjects or ebpf.CollectionSpec.LoadAndAssign.
type dependencyTracerPrograms struct {
	CgroupBindTracker    *ebpf.Program `ebpf:"cgroup_bind_tracker"`
	CgroupConnectTracker *ebpf.Program `ebpf:"cgroup_connect_tracker"`
	SockopsTracker       *ebpf.Program `ebpf:"sockops_tracker"`
	TcDependencyTracker  *ebpf.Program `ebpf:"tc_dependency_tracker"`
	TraceSendtoEnhanced  *ebpf.Program `ebpf:"trace_sendto_enhanced"`
	XdpDependencyTracker *ebpf.Program `ebpf:"xdp_dependency_tracker"`
}

func (p *dependencyTracerPrograms) Close() error {
	return _DependencyTracerClose(
		p.CgroupBindTracker,
		p.CgroupConnectTracker,
		p.SockopsTracker,
		p.TcDependencyTracker,
		p.TraceSendtoEnhanced,
		p.XdpDependencyTracker,
	)
}

func _DependencyTracerClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed dependencytracer_bpf.o
var _DependencyTracerBytes []byte
